package com.example.edumap;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationClientOption.AMapLocationMode;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.maps.AMap;
import com.amap.api.maps.LocationSource;
import com.amap.api.maps.MapView;
import com.amap.api.maps.model.BitmapDescriptorFactory;
import com.amap.api.maps.model.MyLocationStyle;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;


public class CopyOfSecondActivity extends Activity implements LocationSource,
AMapLocationListener {
	  
	  	private AMap aMap;
		private MapView mapView;
		private OnLocationChangedListener mListener;
		private AMapLocationClient mlocationClient;
		private AMapLocationClientOption mLocationOption;
	    private static Button buttonSift;

		@Override
		protected void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
		    setContentView(R.layout.activity_second);
		    buttonSift = (Button) findViewById(R.id.button_sift);
		    buttonSift.setVisibility(View.VISIBLE);
		    //获取地图控件引用
		    mapView = (MapView) findViewById(R.id.map);
			init();
		}

		/**
		 * 初始化AMap对象
		 */
		private void init() {
			if (aMap == null) {
				aMap = mapView.getMap();
				setUpMap();
			}
		}

		/**
		 * 设置一些amap的属性
		 */
		private void setUpMap() {
			// 自定义系统定位小蓝点
			MyLocationStyle myLocationStyle = new MyLocationStyle();
			myLocationStyle.myLocationIcon(BitmapDescriptorFactory
					.fromResource(R.drawable.location));// 设置小蓝点的图标
			myLocationStyle.strokeColor(Color.BLACK);// 设置圆形的边框颜色
			myLocationStyle.radiusFillColor(Color.argb(100, 0, 0, 180));// 设置圆形的填充颜色
			// myLocationStyle.anchor(int,int)//设置小蓝点的锚点
			myLocationStyle.strokeWidth(1.0f);// 设置圆形的边框粗细
			aMap.setMyLocationStyle(myLocationStyle);
			aMap.setLocationSource(this);// 设置定位监听
			aMap.getUiSettings().setMyLocationButtonEnabled(true);// 设置默认定位按钮是否显示
			aMap.setMyLocationEnabled(true);// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false
		   // aMap.setMyLocationType()
		}

		/**
		 * 方法必须重写
		 */
		@Override
		protected void onResume() {
			super.onResume();
			mapView.onResume();
		}

		/**
		 * 方法必须重写
		 */
		@Override
		protected void onPause() {
			super.onPause();
			mapView.onPause();
			deactivate();
		}

		/**
		 * 方法必须重写
		 */
		@Override
		protected void onSaveInstanceState(Bundle outState) {
			super.onSaveInstanceState(outState);
			mapView.onSaveInstanceState(outState);
		}

		/**
		 * 方法必须重写
		 */
		@Override
		protected void onDestroy() {
			super.onDestroy();
			mapView.onDestroy();
		}

		/**
		 * 定位成功后回调函数
		 */
		@Override
		public void onLocationChanged(AMapLocation amapLocation) {
			if (mListener != null && amapLocation != null) {
				if (amapLocation != null
						&& amapLocation.getErrorCode() == 0) {
					mListener.onLocationChanged(amapLocation);// 显示系统小蓝点
				} else {
					String errText = "定位失败," + amapLocation.getErrorCode()+ ": " + amapLocation.getErrorInfo();
					Log.e("AmapErr",errText);
				}
			}
		}

		/**
		 * 激活定位
		 */
		@Override
		public void activate(OnLocationChangedListener listener) {
			mListener = listener;
			if (mlocationClient == null) {
				mlocationClient = new AMapLocationClient(this);
				mLocationOption = new AMapLocationClientOption();
				//设置定位监听
				mlocationClient.setLocationListener(this);
				//设置为高精度定位模式
				mLocationOption.setLocationMode(AMapLocationMode.Hight_Accuracy);
				//设置定位参数
				mlocationClient.setLocationOption(mLocationOption);
				// 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗，
				// 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用stopLocation()方法来取消定位请求
				// 在定位结束后，在合适的生命周期调用onDestroy()方法
				// 在单次定位情况下，定位无论成功与否，都无需调用stopLocation()方法移除请求，定位sdk内部会移除
				mlocationClient.startLocation();
			}
		}

		/**
		 * 停止定位
		 */
		@Override
		public void deactivate() {
			mListener = null;
			if (mlocationClient != null) {
				mlocationClient.stopLocation();
				mlocationClient.onDestroy();
			}
			mlocationClient = null;
		}

	     
	}